Strategy - defines an interface common to all supported algorithms. 

Context - uses this interface to call the algorithm defined by a ConcreteStrategy.

ConcreteStrategy - each concrete strategy implements an algorithm.

Context
-> contains a reference to a strategy object.
-> may define an interface that lets strategy accessing its data.

The Context objects contains a reference to the ConcreteStrategy that should be used. 

When an operation is required then the algorithm is run from the strategy object. The Context is not aware of the strategy implementation. If necessary, addition objects can be defined to pass data from context object to strategy. 

The context object receives requests from the client and delegates them to the strategy object. Usually the ConcreteStartegy is created by the client and passed to the context. From this point the clients interacts only with the context.

-------------

The strategy design pattern splits the behavior (there are many behaviors) of a class from the class itself.

This has some advantages, but the main draw back is that a client must understand how the Strategies differ. Since clients get exposed to implementation issues the strategy design pattern should be used only when the variation in behavior is relevant to them.

-------------

This pattern lets the algorithm vary independently from client to client that are using it. 

or 

When we want to use one of the several behaviors dynamically. 


Advantages:
===========

-> reduces long list of conditionals
-> avoids duplicate code 
-> keeps class changes from forcing other class changes
-> can hide complicated / secret code from user

dis Adv :
===========

-> increased number of objects / classes 