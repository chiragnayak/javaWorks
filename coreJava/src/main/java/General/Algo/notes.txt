
Asymptotic Analysis 
====================

-> The main idea of asymptotic analysis is to have a measure of efficiency of algorithms that doesn’t depend on machine specific constants,

-> In Asymptotic Analysis, we evaluate the performance of an algorithm in terms of input size (we don’t measure the actual running time). 

-> We calculate, how does the time (or space) taken by an algorithm increases with the input size.

For example, let us consider the search problem (searching a given item) in a sorted array. One way to search is Linear Search (order of growth is linear) 
and other way is Binary Search (order of growth is logarithmic).

Note : 

-> It is not perfect.
-> machine dependent constants can always be ignored after certain values of input size.
-> Case : in Asymptotic analysis, we always talk about input sizes larger than a constant value. It might be possible that those large inputs are never given to your software and an algorithm which is asymptotically slower, always performs better for your particular situation. So, you may end up choosing an algorithm that is Asymptotically slower but faster for your software. 

We can have three cases to analyze an algorithm:
1) Worst Case
2) Average Case
3) Best Case


Worst Case: (usually done)
===========

-> we calculate upper bound on running time of an algorithm.
-> We must know the case that causes maximum number of operations to be executed
-> Ex : For Linear Search, the worst case happens when the element to be searched (x in the above code) is not present in the array. When x is not present, the search() functions compares it with all the elements of arr[] one by one. Therefore, the worst case time complexity of linear search would be Θ(n).

Average Case / Expected Case (Sometimes done)
=============================================

-> we take all possible inputs and calculate computing time for all of the inputs. Sum all the calculated values and divide the sum by total number of inputs. 
-> We must know (or predict) distribution of cases.

Best Case: (bogus)
==========
-> we calculate lower bound on running time of an algorithm. 
-> We must know the case that causes minimum number of operations to be executed. 
-> Ex : In the linear search problem, the best case occurs when x is present at the first location. The number of operations in the best case is constant (not dependent on n). So time complexity in the best case would be Θ(1)





