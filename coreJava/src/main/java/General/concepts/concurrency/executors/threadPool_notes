
def #1 : A thread pool, as its name suggests, manages a homogeneous pool of worker threads. 

def #2 : A thread pool is a group of pre-instantiated reusable threads that are available to perform a set of arbitrary tasks

A thread pool is tightly bound to a work queue holding tasks waiting to
be executed.

Worker threads have a simple life: request the next task from the
work queue, execute it, and go back to waiting for another task.

You can create a thread pool by calling one of the static factory methods in Executors:

newFixedThreadPool.
-------------------

->  A fixed-size thread pool creates threads as tasks are submitted,
up to the maximum pool size, and then attempts to keep the pool
size constant (adding new threads if a thread dies due to an unexpected
Exception).


newCachedThreadPool. 
----------------------

-> A cached thread pool has more flexibility to reap idle
threads when the current size of the pool exceeds the demand for processing,
and to add new threads when demand increases, but places no bounds
on the size of the pool.

newSingleThreadExecutor. 
------------------------

-> A single-threaded executor creates a single worker
thread to process tasks, replacing it if it dies unexpectedly. Tasks are guaranteed
to be processed sequentially according to the order imposed by the
task queue (FIFO, LIFO, priority order).

newScheduledThreadPool. 
-------------------------

-> A fixed-size thread pool that supports delayed and
periodic task execution, similar to Timer.
